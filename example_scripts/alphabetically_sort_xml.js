/**
 * Post processor to alphabetically sort all elements in XML files 
 * 
 * This can be useful if you are trying to compare XML generated by different systems
 * for QA purposes.
 */
const sortXmlElements = (xmlString) => {
  const doc = (new xmldom.DOMParser()).parseFromString(xmlString, 'text/xml');

  // Function to recursively sort XML nodes
  function recursiveSort(node) {
      if (!node.hasChildNodes()) {
          return;
      }

      const children = Array.from(node.childNodes).filter(n => n.nodeType === 1); // Element nodes only
      if (children.length > 1) {
          children.sort((a, b) => a.nodeName.localeCompare(b.nodeName));
          // Detach existing child nodes
          children.forEach(child => node.removeChild(child));
          // Reattach sorted nodes
          children.forEach(child => {
              recursiveSort(child); // Sort child nodes
              node.appendChild(child);
          });
      } else {
          // Sort single children recursively
          children.forEach(recursiveSort);
      }
  }

  // Start sorting from the document element
  recursiveSort(doc.documentElement);

  return (new xmldom.XMLSerializer()).serializeToString(doc).split('\n').filter(line => line.trim() !== '').join('\n').replaceAll('><', '>\n<');
}


userLog.info('running custom post processor')
const myFiles = destinationFiles.map((f) => { 
  const newBody = sortXmlElements(f.body)
  f.body = newBody
  return f
})

returnSuccess(myFiles)
